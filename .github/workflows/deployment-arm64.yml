concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
env:
  AstrophysicsDataSystemAPIKey: ${{ secrets.AstrophysicsDataSystemAPIKey }}
  BiodiversityHeritageApiKey: ${{ secrets.BiodiversityHeritageApiKey}}
  GRADLE_OPTS: -Xmx4g -Dorg.gradle.daemon=false -Dorg.gradle.vfs.watch=false
  IEEEAPIKey: ${{ secrets.IEEEAPIKey }}
  JAVA_OPTS: -Xmx4g
  OSXCERT: ${{ secrets.OSX_SIGNING_CERT }}
  SpringerNatureAPIKey: ${{ secrets.SpringerNatureAPIKey }}
jobs:
  build:
    name: Create installer and portable version for ${{ matrix.displayName }}
    outputs:
      branchname: ${{ steps.gitversion.outputs.branchName }}
      major: ${{ steps.gitversion.outputs.Major }}
      minor: ${{ steps.gitversion.outputs.Minor }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        BUILDJABREFPRIVATEKEY: ${{ secrets.buildJabRefPrivateKey }}
      id: checksecrets
      name: Check secrets presence
      run: "if [ \"$BUILDJABREFPRIVATEKEY\" == \"\" ]; then\n  echo \"secretspresent=NO\"\
        \ >> $GITHUB_OUTPUT\nelse\n  echo \"secretspresent=YES\" >> $GITHUB_OUTPUT\n\
        fi\n"
      shell: bash
    - continue-on-error: true
      name: Fetch all history for all tags and branches
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        show-progress: 'false'
        submodules: 'true'
    - continue-on-error: true
      name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: 5.x
    - continue-on-error: true
      id: gitversion
      name: Run GitVersion
      uses: gittools/actions/gitversion/execute@v1.1.1
    - continue-on-error: true
      name: Setup JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21.0.2
    - continue-on-error: true
      name: Clean up keychain
      run: 'security delete-keychain signing_temp.keychain ${{runner.temp}}/keychain/notarization.keychain
        || true

        '
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Setup OSX key chain on macOS-arm
      uses: slidoapp/import-codesign-certs@1923310662e8682dd05b76b612b53301f431cd5d
      with:
        keychain-password: jabref
        p12-file-base64: ${{ secrets.OSX_SIGNING_CERT }}
        p12-password: ${{ secrets.OSX_CERT_PWD }}
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Setup OSX key chain on OSX for app id cert
      uses: slidoapp/import-codesign-certs@1923310662e8682dd05b76b612b53301f431cd5d
      with:
        create-keychain: false
        keychain-password: jabref
        p12-file-base64: ${{ secrets.OSX_SIGNING_CERT_APPLICATION }}
        p12-password: ${{ secrets.OSX_CERT_PWD }}
    - continue-on-error: true
      name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-home-cache-cleanup: true
    - continue-on-error: true
      name: Prepare merged jars and modules dir (macOS)
      run: ./gradlew -i -PprojVersion="${{ steps.gitversion.outputs.AssemblySemVer
        }}" -PprojVersionInfo="${{ steps.gitversion.outputs.InformationalVersion }}"
        prepareModulesDir
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Build dmg (macOS)
      run: 'jpackage \

        --module org.jabref/org.jabref.Launcher \

        --module-path ${{env.JAVA_HOME}}/jmods/:build/jlinkbase/jlinkjars \

        --add-modules org.jabref,org.jabref.merged.module  \

        --dest build/distribution \

        --app-content buildres/mac/jabrefHost.py \

        --app-content buildres/mac/native-messaging-host \

        --name JabRef \

        --app-version ${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }} \

        --verbose \

        --mac-sign \

        --vendor "JabRef e.V." \

        --mac-package-identifier JabRef \

        --mac-package-name JabRef \

        --type dmg --mac-signing-key-user-name "JabRef e.V. (6792V39SK3)" \

        --mac-package-signing-prefix org.jabref \

        --mac-entitlements buildres/mac/jabref.entitlements \

        --icon src/main/resources/icons/jabref.icns \

        --resource-dir buildres/mac \

        --file-associations buildres/mac/bibtexAssociations.properties \

        --jlink-options --bind-services \

        --java-options --add-exports=javafx.base/com.sun.javafx.event=org.jabref.merged.module
        \

        --java-options --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.graphics/javafx.scene=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/javafx.scene.control.skin=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/com.sun.javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref
        \

        --java-options --add-exports=javafx.base/com.sun.javafx.event=org.jabref \

        --java-options --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref
        \

        --java-options --add-opens=javafx.graphics/javafx.scene=org.jabref \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref
        \

        --java-options --add-opens=javafx.controls/com.sun.javafx.scene.control=org.jabref

        '
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Build pkg (macOS)
      run: 'jpackage \

        --module org.jabref/org.jabref.Launcher \

        --module-path ${{env.JAVA_HOME}}/jmods/:build/jlinkbase/jlinkjars \

        --add-modules org.jabref,org.jabref.merged.module  \

        --dest build/distribution \

        --app-content buildres/mac/jabrefHost.py \

        --app-content buildres/mac/native-messaging-host \

        --name JabRef \

        --app-version ${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }} \

        --verbose \

        --mac-sign \

        --vendor "JabRef e.V." \

        --mac-package-identifier JabRef \

        --mac-package-name JabRef \

        --type pkg --mac-signing-key-user-name "JabRef e.V. (6792V39SK3)" \

        --mac-package-signing-prefix org.jabref \

        --mac-entitlements buildres/mac/jabref.entitlements \

        --icon src/main/resources/icons/jabref.icns \

        --resource-dir buildres/mac \

        --file-associations buildres/mac/bibtexAssociations.properties \

        --jlink-options --bind-services \

        --java-options --add-exports=javafx.base/com.sun.javafx.event=org.jabref.merged.module
        \

        --java-options --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.graphics/javafx.scene=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/com.sun.javafx.scene.control=org.jabref.merged.module
        \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref
        \

        --java-options --add-exports=javafx.base/com.sun.javafx.event=org.jabref \

        --java-options --add-exports=javafx.controls/com.sun.javafx.scene.control=org.jabref
        \

        --java-options --add-opens=javafx.graphics/javafx.scene=org.jabref \

        --java-options --add-opens=javafx.controls/javafx.scene.control=org.jabref
        \

        --java-options --add-opens=javafx.controls/com.sun.javafx.scene.control=org.jabref

        '
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Rename files with arm64 suffix as well
      run: 'mv build/distribution/JabRef-${{ steps.gitversion.outputs.Major }}.${{
        steps.gitversion.outputs.Minor }}.dmg  build/distribution/JabRef-${{ steps.gitversion.outputs.Major
        }}.${{ steps.gitversion.outputs.Minor }}-arm64.dmg

        mv build/distribution/JabRef-${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}.pkg  build/distribution/JabRef-${{ steps.gitversion.outputs.Major }}.${{
        steps.gitversion.outputs.Minor }}-arm64.pkg

        '
      shell: bash
    - continue-on-error: true
      if: ${{ (!startsWith(github.ref, 'refs/heads/gh-readonly-queue')) && (steps.checksecrets.outputs.secretspresent
        == 'YES') && ((matrix.os == 'macos-14') && !((startsWith(github.ref, 'refs/tags/')
        || inputs.notarization == true))) }}
      name: Setup rsync (macOS)
      run: brew install rsync
    - continue-on-error: true
      if: ${{ (steps.checksecrets.outputs.secretspresent == 'YES') && (!startsWith(github.ref,
        'refs/heads/gh-readonly-queue')) && ((matrix.os != 'macos-14') || !((startsWith(github.ref,
        'refs/tags/') || (inputs.notarization == true)))) }}
      name: Setup SSH key
      run: 'echo "${{ secrets.buildJabRefPrivateKey }}" > sshkey

        chmod 600 sshkey

        '
    - continue-on-error: true
      if: ${{ (!startsWith(github.ref, 'refs/heads/gh-readonly-queue')) && (steps.checksecrets.outputs.secretspresent
        == 'YES') && ((matrix.os == 'ubuntu-latest') || ((matrix.os == 'macos-14')
        && !((startsWith(github.ref, 'refs/tags/') || inputs.notarization == true))))
        }}
      name: Upload to builds.jabref.org (linux, macOS)
      run: 'rsync -rt --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r --itemize-changes
        --stats --rsync-path="mkdir -p /var/www/builds.jabref.org/www/${{ steps.gitversion.outputs.branchName
        }} && rsync" -e ''ssh -p 9922 -i sshkey -o StrictHostKeyChecking=no'' build/distribution/
        jrrsync@build-upload.jabref.org:/var/www/builds.jabref.org/www/${{ steps.gitversion.outputs.branchName
        }}/

        '
      shell: bash
    - continue-on-error: true
      if: (matrix.os == 'macos-14') && (steps.checksecrets.outputs.secretspresent
        == 'YES') && (startsWith(github.ref, 'refs/tags/') || inputs.notarization
        == true)
      name: Upload to GitHub workflow artifacts store (macOS)
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0
        name: JabRef-macOS-arm-tbn
        path: build/distribution
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent != 'YES')
      name: Upload to GitHub workflow artifacts store
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0
        name: JabRef-${{ matrix.os }}
        path: build/distribution
    strategy:
      fail-fast: false
      matrix:
        include:
        - displayName: macOS (ARM64)
          os: macos-14
          suffix: _arm64
  notarize:
    if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.notarization == true }}
    name: macOS notarization-arm
    needs:
    - build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        BUILDJABREFPRIVATEKEY: ${{ secrets.buildJabRefPrivateKey }}
      id: checksecrets
      name: Check secrets presence
      run: "if [ \"$BUILDJABREFPRIVATEKEY\" == \"\" ]; then\n  echo \"secretspresent=NO\"\
        \ >> $GITHUB_OUTPUT\nelse\n  echo \"secretspresent=YES\" >> $GITHUB_OUTPUT\n\
        fi\n"
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Download from GitHub workflow artifacts store (macOS)
      uses: actions/download-artifact@master
      with:
        name: JabRef-macOS-arm-tbn
        path: build/distribution/
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Notarize dmg
      run: 'xcrun notarytool store-credentials "notarytool-profile" --apple-id "vorstand@jabref.org"
        --team-id "6792V39SK3" --password "${{ secrets.OSX_NOTARIZATION_APP_PWD }}"

        xcrun notarytool submit build/distribution/JabRef-${{ needs.build.outputs.major
        }}.${{ needs.build.outputs.minor }}-arm64.dmg --keychain-profile "notarytool-profile"
        --wait

        xcrun stapler staple build/distribution/JabRef-${{ needs.build.outputs.major
        }}.${{ needs.build.outputs.minor }}-arm64.dmg

        '
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Notarize pkg
      run: 'xcrun notarytool store-credentials "notarytool-profile" --apple-id "vorstand@jabref.org"
        --team-id "6792V39SK3" --password "${{ secrets.OSX_NOTARIZATION_APP_PWD }}"

        xcrun notarytool submit build/distribution/JabRef-${{ needs.build.outputs.major
        }}.${{ needs.build.outputs.minor }}-arm64.pkg --keychain-profile "notarytool-profile"
        --wait

        xcrun stapler staple build/distribution/JabRef-${{ needs.build.outputs.major
        }}.${{ needs.build.outputs.minor }}-arm64.pkg

        '
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES')
      name: Upload to builds.jabref.org
      run: 'echo "${{ secrets.buildJabRefPrivateKey }}" > sshkey

        chmod 600 sshkey

        rsync -rt --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r --itemize-changes --stats
        --rsync-path="mkdir -p /var/www/builds.jabref.org/www/${{ needs.build.outputs.branchname
        }} && rsync" -e ''ssh -p 9922 -i sshkey -o StrictHostKeyChecking=no'' build/distribution/
        jrrsync@build-upload.jabref.org:/var/www/builds.jabref.org/www/${{ needs.build.outputs.branchname
        }}/

        '
      shell: bash
name: Deployment (macOS/ARM64)
on:
  repository_dispatch:
    types: trigger-ga___deployment-arm64.yml
