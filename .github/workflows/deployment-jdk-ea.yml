concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
env:
  AstrophysicsDataSystemAPIKey: ${{ secrets.AstrophysicsDataSystemAPIKey }}
  BiodiversityHeritageApiKey: ${{ secrets.BiodiversityHeritageApiKey}}
  GRADLE_OPTS: -Xmx4g -Dorg.gradle.vfs.watch=false
  IEEEAPIKey: ${{ secrets.IEEEAPIKey }}
  JAVA_OPTS: -Xmx4g
  OSXCERT: ${{ secrets.OSX_SIGNING_CERT }}
  SpringerNatureAPIKey: ${{ secrets.SpringerNatureAPIKey }}
jobs:
  build:
    name: 'JDK ${{ matrix.jdk }}: ${{ matrix.displayName }} JavaFX ${{ matrix.javafx
      }}'
    outputs:
      branchname: ${{ steps.gitversion.outputs.branchName }}
      major: ${{ steps.gitversion.outputs.Major }}
      minor: ${{ steps.gitversion.outputs.Minor }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        BUILDJABREFPRIVATEKEY: ${{ secrets.buildJabRefPrivateKey }}
      id: checksecrets
      name: Check secrets presence
      run: "if [ \"$BUILDJABREFPRIVATEKEY\" == \"\" ]; then\n  echo \"secretspresent=NO\"\
        \ >> $GITHUB_OUTPUT\n  echo \"\u274C Secret BUILDJABREFPRIVATEKEY not present\"\
        \nelse\n  echo \"secretspresent=YES\" >> $GITHUB_OUTPUT\n  echo \"\u2714\uFE0F\
        \ Secret BUILDJABREFPRIVATEKEY present\"\nfi\n"
      shell: bash
    - continue-on-error: true
      name: Fetch all history for all tags and branches
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        show-progress: 'false'
        submodules: 'true'
    - continue-on-error: true
      if: (matrix.os == 'ubuntu-latest') || (matrix.os == 'buildjet-4vcpu-ubuntu-2204-arm')
      name: Install pigz and cache (linux)
      uses: awalsh128/cache-apt-pkgs-action@master
      with:
        packages: pigz
        version: 1.0
    - continue-on-error: true
      name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: 5.x
    - continue-on-error: true
      id: gitversion
      name: Run GitVersion
      uses: gittools/actions/gitversion/execute@v1.1.1
    - continue-on-error: true
      name: Set up JDK ${{ matrix.jdk }}
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: ${{ matrix.jdk }}
    - continue-on-error: true
      name: Set JDK${{ matrix.jdk }} env var
      run: echo "JDK${{ matrix.jdk }}=$JAVA_HOME" >> $GITHUB_ENV
      shell: bash
    - continue-on-error: true
      if: (matrix.os != 'macos-latest')
      name: Set JDK${{ matrix.jdk }} in toolchain (linux, Windows)
      run: 'sed -i ''s/JavaLanguageVersion.of(.*)/JavaLanguageVersion.of(${{ matrix.jdk
        }})/'' build.gradle

        sed -i ''s/JavaVersion.VERSION_(.*)/JavaVersion.VERSION_(${{ matrix.jdk }})/''
        build.gradle

        '
      shell: bash
    - continue-on-error: true
      if: (matrix.os == 'macos-latest')
      name: Set JDK${{ matrix.jdk }} in toolchain (macOS)
      run: 'sed -i''.bak'' ''s/JavaLanguageVersion.of(.*)/JavaLanguageVersion.of(${{
        matrix.jdk }})/'' build.gradle

        sed -i''.bak'' ''s/JavaVersion.VERSION_(.*)/JavaVersion.VERSION_(${{ matrix.jdk
        }})/'' build.gradle

        '
      shell: bash
    - continue-on-error: true
      if: (matrix.os != 'buildjet-4vcpu-ubuntu-2204-arm')
      name: Download and extract JavaFX ${{ matrix.javafx }}
      run: "cd javafx\ncurl --no-progress-meter https://jdk.java.net/javafx${{ matrix.javafx\
        \ }}/ > javafx.html\n\ncase \"${{ matrix.os }}\" in\n  \"ubuntu-latest\")\n\
        \    OS=\"linux\"\n    EXTRACT=\"tar xzf *.tar.gz\"\n    EXT=\"tar.gz\"\n\
        \    ;;\n  \"buildjet-4vcpu-ubuntu-2204-arm\")\n    OS=\"linux\"\n    EXTRACT=\"\
        tar xzf *.tar.gz\"\n    EXT=\"tar.gz\"\n    echo \"There are no ARM EA builds\"\
        \n    exit 0\n    ;;\n  \"windows-latest\")\n    OS=\"windows\"\n    EXTRACT=\"\
        unzip -qq *.zip\"\n    EXT=\"zip\"\n    ;;\n  \"macos-latest\")\n    OS=\"\
        macos\"\n    EXTRACT=\"tar xzf *.tar.gz\"\n    EXT=\"tar.gz\"\n    ;;\n  *)\n\
        \    echo \"Unsupported OS\"\n    exit 1\n    ;;\nesac\necho \"OS set to $OS\"\
        \n\nURL_SDK=$(grep -o \"https://download.java.net/java/.*/javafx.*${OS}-x64_bin-sdk.${EXT}\"\
        \ javafx.html | head -n 1)\necho \"Downloading $URL_SDK...\"\ncurl -OJ --no-progress-meter\
        \ $URL_SDK\n$EXTRACT\nrm *.$EXT\n\nURL_JMODS=$(grep -o \"https://download.java.net/java/.*/javafx.*${OS}-x64_bin-jmods.${EXT}\"\
        \ javafx.html | head -n 1)\necho \"Downloading $URL_JMODS...\"\ncurl -OJ --no-progress-meter\
        \ $URL_JMODS\n$EXTRACT\nrm *.$EXT\n"
      shell: bash
    - continue-on-error: true
      if: (matrix.os != 'macos-latest') && (matrix.os != 'buildjet-4vcpu-ubuntu-2204-arm')
      name: Set JavaFX ${{ matrix.javafx }} (linux, Windows)
      run: 'sed -i ''/javafx {/{n;s#version = ".*"#sdk = "javafx/javafx-sdk-${{ matrix.javafx
        }}"#}'' build.gradle

        sed -i "s#jlink {#jlink { addExtraModulePath ''javafx/javafx-jmods-${{ matrix.javafx
        }}''#" build.gradle

        cat build.gradle

        '
    - continue-on-error: true
      if: (matrix.os == 'macos-latest') && (matrix.os != 'buildjet-4vcpu-ubuntu-2204-arm')
      name: Set JavaFX ${{ matrix.javafx }} (macOS)
      run: 'sed -i ''.bak'' -e ''/javafx {/{n'' -e ''s#version = ".*"#sdk = "javafx/javafx-sdk-${{
        matrix.javafx }}"#;}'' build.gradle

        sed -i ''.bak'' -e "s#jlink {#jlink { addExtraModulePath ''javafx/javafx-jmods-${{
        matrix.javafx }}''#" build.gradle

        cat build.gradle

        '
    - continue-on-error: true
      if: (matrix.os == 'buildjet-4vcpu-ubuntu-2204-arm')
      name: Set JavaFX ${{ matrix.javafx }} (linux-arm)
      run: 'curl -s "https://search.maven.org/solrsearch/select?q=g:org.openjfx+AND+a:javafx&rows=10&core=gav"
        > /tmp/versions.json

        jq ''[.response.docs[] | select(.v | test(".*-ea\\+.*")) | select(.v | test("^17|^18|^19|^20|^21|^22")
        | not) | {version: .v}] | group_by(.version | capture("^(?<major>\\d+).*").major)
        | map(max_by(.version))'' < /tmp/versions.json > /tmp/versions-latest.json

        JAVAFX=$(jq -r ''.[-1].version'' /tmp/versions-latest.json)

        echo "Using JavaFX ${JAVAFX}"

        sed -i "/javafx {/{n;s#version = \".*\"#version = \"${JAVAFX}\"#}" build.gradle
        && cat build.gradle

        '
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
    - continue-on-error: true
      name: Set up Gradle
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-home-cache-cleanup: true
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'NO')
      name: Prepare merged jars and modules dir
      run: ./gradlew -i -PprojVersion="${{ steps.gitversion.outputs.AssemblySemVer
        }}" -PprojVersionInfo="${{ steps.gitversion.outputs.InformationalVersion }}"
        prepareModulesDir
    - continue-on-error: true
      if: (matrix.os == 'macos-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES')
      name: Set up macOS key chain
      uses: slidoapp/import-codesign-certs@1923310662e8682dd05b76b612b53301f431cd5d
      with:
        keychain-password: jabref
        p12-file-base64: ${{ secrets.OSX_SIGNING_CERT }}
        p12-password: ${{ secrets.OSX_CERT_PWD }}
    - continue-on-error: true
      if: (matrix.os == 'macos-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES')
      name: Set up macOS key chain for app id cert
      uses: slidoapp/import-codesign-certs@1923310662e8682dd05b76b612b53301f431cd5d
      with:
        create-keychain: false
        keychain-password: jabref
        p12-file-base64: ${{ secrets.OSX_SIGNING_CERT_APPLICATION }}
        p12-password: ${{ secrets.OSX_CERT_PWD }}
    - continue-on-error: true
      name: Build runtime image and installer
      run: ./gradlew -i -PprojVersion="${{ steps.gitversion.outputs.AssemblySemVer
        }}" -PprojVersionInfo="${{ steps.gitversion.outputs.InformationalVersion }}"
        jpackage jlinkZip
      shell: bash
    - continue-on-error: true
      name: Package application image
      run: ${{ matrix.archivePortable }}
      shell: bash
    - continue-on-error: true
      if: (matrix.os != 'macos-latest')
      name: Rename files
      run: 'get-childitem -Path build/distribution/* | rename-item -NewName {$_.name
        -replace "${{ steps.gitversion.outputs.AssemblySemVer }}","${{ steps.gitversion.outputs.Major
        }}.${{ steps.gitversion.outputs.Minor }}"}

        get-childitem -Path build/distribution/* | rename-item -NewName {$_.name -replace
        "portable","${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}-portable"}

        '
      shell: pwsh
    - continue-on-error: true
      if: (matrix.os == 'ubuntu-latest')
      name: Repack deb file for Debian
      run: 'cd build/distribution

        ar x jabref_${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}_amd64.deb

        zstd -d < control.tar.zst | xz > control.tar.xz

        zstd -d < data.tar.zst | xz > data.tar.xz

        ar -m -c -a sdsd jabref_${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}_amd64_repackaged.deb debian-binary control.tar.xz data.tar.xz

        rm debian-binary control.tar.* data.tar.*

        mv -f jabref_${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}_amd64_repackaged.deb jabref_${{ steps.gitversion.outputs.Major }}.${{ steps.gitversion.outputs.Minor
        }}_amd64.deb

        '
      shell: bash
    - continue-on-error: true
      name: Rename files with JDK version
      run: "for file in build/distribution/*.*; do\n  base=${file%.*}\n  ext=${file##*.}\n\
        \  mv \"$file\" \"${base}-jdk${{ matrix.jdk }}-javafx${{ matrix.javafx }}.${ext}\"\
        \ndone\n"
      shell: bash
    - continue-on-error: true
      if: (matrix.os == 'macos-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES') && (github.ref == 'refs/heads/main')
      name: Set up rsync (macOS)
      run: brew install rsync
    - continue-on-error: true
      if: (matrix.os == 'windows-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES') && (github.ref == 'refs/heads/main')
      name: Set up rsync (Windows)
      run: choco install --no-progress rsync
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent == 'YES') && (github.ref == 'refs/heads/main')
      name: Set up SSH key
      run: 'echo "${{ secrets.buildJabRefPrivateKey }}" > sshkey

        chmod 600 sshkey

        '
    - continue-on-error: true
      if: (matrix.os == 'windows-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES') && (github.ref == 'refs/heads/main')
      name: Upload to builds.jabref.org (Windows)
      run: 'rsync -rt --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r --itemize-changes
        --stats --rsync-path="mkdir -p /var/www/builds.jabref.org/www/jdk-ea && rsync"
        -e ''C:\ProgramData\chocolatey\lib\rsync\tools\bin\ssh.exe -p 9922 -i sshkey
        -o StrictHostKeyChecking=no'' build/distribution/ jrrsync@build-upload.jabref.org:/var/www/builds.jabref.org/www/jdk-ea/

        '
      shell: cmd
    - continue-on-error: true
      if: (matrix.os != 'windows-latest') && (steps.checksecrets.outputs.secretspresent
        == 'YES') && (github.ref == 'refs/heads/main')
      name: Upload to builds.jabref.org (linux, macOS)
      run: 'rsync -rt --chmod=Du=rwx,Dg=rx,Do=rx,Fu=rw,Fg=r,Fo=r --itemize-changes
        --stats --rsync-path="mkdir -p /var/www/builds.jabref.org/www/jdk-ea && rsync"
        -e ''ssh -p 9922 -i sshkey -o StrictHostKeyChecking=no'' build/distribution/
        jrrsync@build-upload.jabref.org:/var/www/builds.jabref.org/www/jdk-ea/

        '
      shell: bash
    - continue-on-error: true
      if: (steps.checksecrets.outputs.secretspresent != 'YES') || (github.ref != 'refs/heads/main')
      name: Upload to GitHub workflow artifacts store
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0
        name: JabRef-${{ matrix.os }}
        path: build/distribution
    strategy:
      fail-fast: false
      matrix:
        include:
        - archivePortable: tar -c -C build/distribution JabRef | pigz --rsyncable
            > build/distribution/JabRef-portable_linux.tar.gz && rm -R build/distribution/JabRef
          displayName: linux
          os: ubuntu-latest
        - archivePortable: 7z a -r build/distribution/JabRef-portable_windows.zip
            ./build/distribution/JabRef && rm -R build/distribution/JabRef
          displayName: windows
          os: windows-latest
        - archivePortable: tar -c -C build/distribution JabRef | pigz --rsyncable
            > build/distribution/JabRef-portable_linux-arm64.tar.gz && rm -R build/distribution/JabRef
          displayName: linux-arm
          os: buildjet-4vcpu-ubuntu-2204-arm
        - archivePortable: brew install pigz && tar -c -C build/distribution JabRef.app
            | pigz --rsyncable > build/distribution/JabRef-portable_macos.tar.gz &&
            rm -R build/distribution/JabRef.app
          displayName: macOS
          os: macos-latest
        javafx:
        - 23
        jdk:
        - 22
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
        - buildjet-4vcpu-ubuntu-2204-arm
name: Deployment (JDK early access builds)
on:
  repository_dispatch:
    types: trigger-ga___deployment-jdk-ea.yml
